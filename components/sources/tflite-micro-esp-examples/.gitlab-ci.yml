stages:
  - build
  - sync
  - deploy

variables:
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  SYNC_BRANCH_NAME: "ci/sync_gh_tflite-lib"
  SYNC_COMMIT_MSG: "tflite-lib-sync: Update tflite-lib (synced from github)"
  REPO_URL: "https://${PUSH_TO_GITLAB_TOKEN_NAME}:${PUSH_TO_GITLAB_TOKEN}@gitlab.espressif.cn:6688/app-frameworks/tflite-micro-esp-examples.git"

before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY_TMP > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

.setup_idf: &setup_idf
    - cd ${CI_PROJECT_DIR}
    # - git clone --recursive --single-branch -b release/v4.3 --reference-if-able /local_references/gitlab/ ssh://git@gitlab.espressif.cn:27227/espressif/esp-idf.git
    - echo "${IDF_BRANCH_NAME}"
    - echo ${IDF_BRANCH_NAME}
    - git clone --recursive --single-branch -b ${IDF_BRANCH_NAME} --reference-if-able /local_references/gitlab/ https://gitlab-ci-token:${BOT_TOKEN}@gitlab.espressif.cn:6688/espressif/esp-idf.git
    - cd esp-idf
    - ./install.sh
    - . export.sh
    - cd ${CI_PROJECT_DIR}
    - export IDF_PATH=${CI_PROJECT_DIR}/esp-idf
    - echo "IDF_PATH is set to $IDF_PATH"

.test_build: &test_build
    # Build examples
    - ./scripts/build_examples.sh $TARGET

build:gitlab:default:
  stage: build
  image: tflite-micro
  tags:
    - build
  variables:
    IDF_BRANCH_NAME: "release/v4.3"
    TARGET: "esp32"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: always
  script:
    - cd ${CI_PROJECT_DIR}
    # setup esp-idf
    - *setup_idf
    # build examples
    - *test_build
    - cd ${CI_PROJECT_DIR}

build:gitlab:esp32s3:
  stage: build
  image: tflite-micro
  tags:
    - build
  variables:
    IDF_BRANCH_NAME: "release/v4.4"
    TARGET: "esp32s3"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: always
  script:
    - cd ${CI_PROJECT_DIR}
    # setup esp-idf
    - *setup_idf
    # build examples
    - *test_build
    - cd ${CI_PROJECT_DIR}

.push_to_gitlab: &push_to_gitlab
    # Push updated repo (synced from github) to gitlab
    - git config --global user.email "vikram.dattu@espressif.com"
    - git config --global user.name "Gitlab-Scheduled-GH-Sync-Job"
    - git remote set-url origin ${REPO_URL}
    # check - remote branch should not exist (i.e. the open MR (if any) should be merged and branch should have been deleted)
    - git ls-remote --exit-code --heads ${REPO_URL} ${SYNC_BRANCH_NAME} && echo "ERROR - ${SYNC_BRANCH_NAME} branch already exists. Is there any open MR ?" && exit 1
    - git branch ${SYNC_BRANCH_NAME} 2>&1 || echo "Branch exists" && git branch -D ${SYNC_BRANCH_NAME} 2>&1 || echo "Branch deleted" && git branch ${SYNC_BRANCH_NAME} 2>&1 && echo "Branch created"
    - git checkout ${SYNC_BRANCH_NAME}
    - git add components/tflite-lib
    - git commit -m "${SYNC_COMMIT_MSG}"
    - git push --set-upstream origin ${SYNC_BRANCH_NAME}
    - git status
    - git log -2
    # The variable ${SYNC_BRANCH_NAME} is not getting set here (currently), so branch name is directly added for `source_branch` key
    - curl --request POST --url "https://gitlab.espressif.cn:6688/api/v4/projects/2457/merge_requests" --header
      "PRIVATE-TOKEN:${PUSH_TO_GITLAB_TOKEN}" --header "content-type:application/json" --data '{"title":"Update tflite-lib (synced from github) - '${CI_PIPELINE_ID}'", "source_branch":"ci/sync_gh_tflite-lib", "target_branch":"master" }'
    - git checkout -

sync_from_github:on-schedule:
  stage: sync
  image: tflite-micro
  tags:
    - sync
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
  script:
    # sync tflite-lib from github
    - cd ${CI_PROJECT_DIR}
    - echo "====================== Sync tflite-lib from Github and push to Gitlab ======================"
    - ./scripts/sync_from_tflite_micro.sh
    # push to gitlab
    - *push_to_gitlab
    - echo "====================== Done ======================"

push_to_github:
  stage: deploy
  image: tflite-micro
  tags:
    - deploy
  when: manual
  only:
    - master
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote remove github &>/dev/null || true
    - git remote add github git@github.com:espressif/tflite-micro-esp-examples.git
    - git push github "${CI_COMMIT_SHA}:refs/heads/${CI_COMMIT_REF_NAME}"

